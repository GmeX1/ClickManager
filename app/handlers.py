import traceback

from aiogram import F, Router
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from loguru import logger
from pyrogram import Client
from pyrogram.errors.exceptions import SessionPasswordNeeded

import app.key as k
from Private import api_hash, api_id, admin
from app.md5_hash import generate_referral_hash

from db.functions import (db_add_hash, db_callbacks_add, db_check_hash, db_del_hesh, db_settings_add_user,
                          db_settings_check_user_exists, db_settings_get_user, db_settings_update_user,
                          db_stats_get_sum)

# import aiohttp –≥–∏—Ñ–∫–∏
router = Router()


# TODO —Å–¥–µ–ª–∞—Ç—å –≥–∏—Ñ–∫–∏(–Ω–∞–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–µ—Ä–∞m, –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å), —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –æ—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–æ–∫

class Reg(StatesGroup):
    number = State()
    code = State()
    sCode = State()
    Clients = State()
    v_cod = State()


class Max(StatesGroup):
    max_lvl = State()


@router.message(Command('callback'))
async def test_db_callback(message: Message, command: CommandObject):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è callback –∑–∞–ø—Ä–æ—Å–∞"""
    user_id, column, value = command.args.split()
    await db_callbacks_add(user_id, column, value)
    await message.answer('Callback —Å–æ–∑–¥–∞–Ω.')


@router.message(CommandStart())
async def cmd_start(message: Message):
    if await db_settings_check_user_exists(message.from_user.id):
        res = await db_settings_get_user(message.from_user.id)
        if res.active == 1:
            await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n',
                                reply_markup=k.main)
        else:
            await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n'
                                f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /reg', reply_markup=k.main)

    else:
        if await db_check_hash(message.text[7:]):
            logger.info(message.from_user.id)
            result = await db_settings_add_user('ref', message.from_user.id)
            await db_del_hesh(message.text[7:])
            await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n'
                                f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /reg', reply_markup=k.main)
            if not result:
                await message.answer('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ')
        else:
            logger.warning(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.id})')


@router.message(Command('add'))
async def add_user(message: Message, command: CommandObject):
    if message.from_user.id in admin:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        user_id = command.args
        if type(user_id) != int:
            user_id = int(user_id)
            logger.info(user_id)
        result = await db_settings_add_user('ref', user_id)
        if result:
            await message.answer('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
        else:
            await message.answer('‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


@router.message(Command('ref'))
async def add_user(message: Message):
    if message.from_user.id in admin:
        hash_a = await generate_referral_hash()
        await db_add_hash(hash_a)
        await message.answer(f'https://t.me/ClickManagerbot?start={hash_a}')


@router.message(Command('help'))
async def get_help(message: Message):
    if await db_settings_check_user_exists(message.from_user.id):
        await message.answer(f'/help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞'
                             f'\n "–ü—Ä–æ—Ñ–∏–ª—å" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏.'
                             f'\n /start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.'
                             f'\n "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–∫–µ—Ä –Ω–∞ –∞—Ä–±—É–∑—ãüçâ" - –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–∫–µ—Ä+.')


@router.message(F.text == 'üÜò–ü–æ–º–æ—â—å')
async def get_help(message: Message):
    if await db_settings_check_user_exists(message.from_user.id):
        await message.answer('–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –µ–º—É –æ–± –æ—à–∏–±–∫–µ - @Mr_Mangex')


@router.message(F.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
async def get_prof(message: Message):
    if await db_settings_check_user_exists(message.from_user.id):
        res = await db_stats_get_sum(message.from_user.id)
        await message.answer(f'–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–º—É –±–æ—Ç—É –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {res.summary}\n'
                             f'–ë—ã–ª–æ –∫—É–ø–ª–µ–Ω–æ –±—É—Å—Ç–æ–≤: {0}"')


# TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–∫–µ—Ä–∞ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–∞—Å–ª–∞–∏–≤–∞–Ω–∏—è callback'–æ–≤)
@router.message(F.text == 'üçâ–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–∫–µ—Ä –Ω–∞ –∞—Ä–±—É–∑—ã')
async def get_clicker(message: Message):
    if await db_settings_check_user_exists(message.from_user.id):
        await message.reply('‚úÖ –ö–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω', reply_markup=k.OFF)
        await db_callbacks_add(message.from_user.id, 'do_click', '1')


@router.callback_query(F.data == 'OFF')
async def clicker_off(callback: CallbackQuery):
    await callback.answer()
    await db_callbacks_add(callback.from_user.id, 'do_click', '2')
    await callback.message.edit_text('‚ùå –ö–ª–∏–∫–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω', reply_markup=k.ON)


@router.callback_query(F.data == 'ON')
async def clicker_on(callback: CallbackQuery):
    await callback.answer()
    await db_callbacks_add(callback.from_user.id, 'do_click', '1')
    await callback.message.edit_text('‚úÖ –ö–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω', reply_markup=k.OFF)


@router.message(Command('reg'))
async def reg(callback: CallbackQuery):
    if await db_settings_check_user_exists(callback.from_user.id):
        if (await db_settings_get_user(callback.from_user.id)).active == 0:
            await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=k.contact_btn)


@router.message(F.contact)  # –ù–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ 0_–æ
async def save_phone_number(message: Message, state: FSMContext):
    if await db_settings_check_user_exists(message.from_user.id):
        if (await db_settings_get_user(message.from_user.id)).active == 0:
            if message.contact.user_id == message.from_user.id:
                await state.update_data(number=message.contact.phone_number)
                client = Client(str(message.from_user.id), api_id, api_hash)
                await client.connect()
                sCode = await client.send_code(message.contact.phone_number)
                await state.update_data(Clients=client, sCode=sCode)
                await message.answer(
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è: –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞, –º–µ—Å—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ)')
                await state.set_state(Reg.code)


@router.message(Reg.code)
async def reg_code(message: Message, state: FSMContext):
    if await db_settings_check_user_exists(message.from_user.id):
        try:
            data = await state.get_data()
            await data["Clients"].sign_in(data["number"], data["sCode"].phone_code_hash, message.text.replace(' ', ''))
            await db_settings_update_user(message.from_user.id, {'active': True})
            await db_callbacks_add(message.from_user.id, 'active', await data['Clients'].export_session_string())
            await message.answer("–°–ø–∞—Å–∏–±–æ")
            await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n',
                                reply_markup=k.main)
            await state.clear()
        except SessionPasswordNeeded:
            await state.update_data(code=message.text.replace(' ', ''))
            await message.answer('–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 2fa. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å.')
            await state.set_state(Reg.v_cod)
        except Exception as ex:
            logger.error(f'{ex.__class__.__name__}: {ex}')
            await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ –∏ –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è')


@router.message(Reg.v_cod)
async def reg_code(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        await data["Clients"].check_password(message.text)
        await data["Clients"].sign_in(data["number"], data["sCode"].phone_code_hash, data['code'])
        await db_settings_update_user(message.from_user.id, {'active': True})
        await db_callbacks_add(message.from_user.id, 'active', await data['Clients'].export_session_string())
        await message.answer("–°–ø–∞—Å–∏–±–æ")
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n',
                            reply_markup=k.main)
        await state.clear()
    except Exception as ex:
        logger.error(f'{ex.__class__.__name__}: {ex}')
        traceback.print_tb(ex.__traceback__)
        await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ –∏ –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è')


@router.message(F.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–∫–µ—Ä–∞')
async def set_click(message: Message):
    if await db_settings_check_user_exists(message.from_user.id):
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)


@router.callback_query(F.data == 'Klik')
async def buy_click(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É –∫–ª–∏–∫–æ–≤', reply_markup=k.Yes_or_No_K)


@router.callback_query(F.data == 'YesK')
async def yes_click(callback: CallbackQuery):
    change = await db_settings_update_user(callback.from_user.id, {'BUY_CLICK': True})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        await db_callbacks_add(callback.from_user.id, 'settings', 'BUY_CLICK')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'NoK')
async def no_click(callback: CallbackQuery):
    change = await db_settings_update_user(callback.from_user.id, {'BUY_CLICK': False})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        await db_callbacks_add(callback.from_user.id, 'settings', 'BUY_CLICK')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'Avto_klik')
async def auto_click(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É –ê–≤—Ç–æ –∫–ª–∏–∫–æ–≤',
                                     reply_markup=k.Yes_or_No_A)


@router.callback_query(F.data == 'YesA')
async def yes_miner(callback: CallbackQuery):
    change = await db_settings_update_user(callback.from_user.id, {'BUY_MINER': True})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        await db_callbacks_add(callback.from_user.id, 'settings', 'BUY_MINER')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'NoA')
async def no_miner(callback: CallbackQuery):
    change = await db_settings_update_user(callback.from_user.id, {'BUY_MINER': False})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        await db_callbacks_add(callback.from_user.id, 'settings', 'BUY_MINER')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'Energy')
async def buy_energy(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É —ç–Ω–µ—Ä–≥–∏–∏"',
                                     reply_markup=k.Yes_or_No_E)


@router.callback_query(F.data == 'YesE')
async def yes_energy(callback: CallbackQuery):
    change = await db_settings_update_user(callback.from_user.id, {'BUY_ENERGY': True})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        await db_callbacks_add(callback.from_user.id, 'settings', 'BUY_ENERGY')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'NoE')
async def no_energy(callback: CallbackQuery):
    change = await db_settings_update_user(callback.from_user.id, {'BUY_ENERGY': False})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
        await db_callbacks_add(callback.from_user.id, 'settings', 'BUY_ENERGY')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'Max_lvl')
async def buy_lvl(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –ª–∏–º–∏—Ç —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)')
    await state.set_state(Max.max_lvl)


@router.message(Max.max_lvl)
async def change_lvl(message: Message, state: FSMContext):
    if await db_settings_check_user_exists(message.from_user.id):
        try:
            value = message.text
            change = await db_settings_update_user(message.from_user.id, {'BUY_MAX_LVL': int(value)})
            if change:
                await message.answer('‚úÖ–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
                await db_callbacks_add(message.from_user.id, 'settings', value)
        except ValueError:
            await message.answer('‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ: ')
            await state.set_state(Max.max_lvl)
