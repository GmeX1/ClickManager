import asyncio
import hmac
import random
from hashlib import sha256
from time import time
from urllib.parse import unquote

import aiohttp
from loguru import logger
from pyrogram import Client
from pyrogram.raw.types.web_view_result_url import WebViewResultUrl

from temp_vars import BASE_URL, CLICKS_AMOUNT, CLICKS_SLEEP, ENC_KEY
from .utils.decorators import request_handler


class ClickerClient:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –∫–ª–∏–∫–µ—Ä–∞, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–π –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏ Pyrogram."""

    def __init__(self, client: Client, web_app: WebViewResultUrl):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ pyrogram, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.client = client
        self.webviewApp = web_app
        self.session = aiohttp.ClientSession(headers={  # TODO: –°—Ç–æ–∏–ª–æ –±—ã –ø–æ–≤–µ—Å–∏—Ç—å TLSv1.3
            "Accept": "application/json, text/plain, */*",
            "Accept-Encoding": "gzip, deflate, br",
            "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
            "Connection": 'keep-alive',
            "Host": "arbuz.betty.games",
            "Origin": "https://arbuzapp.betty.games",
            "Referer": "https://arbuzapp.betty.games/",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "same-site",
            "TE": "trailers",
            "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 "
                          "Mobile Safari/537.36",
            "X-Telegram-Init-Data": self.get_init_data()
        })
        self.buy_type = {
            'CLICK_POWER': False,
            'MINER': False,
            'ENERGY_RECOVERY': False
        }
        self.do_click = 1

    def get_init_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ init –¥–∞—Ç—ã –¥–ª—è —à–∞–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        data = self.webviewApp.url.split('#tgWebAppData=')[1].replace("%3D", "=")
        data = data.split('&tgWebAppVersion=')[0].replace("%26", "&")
        user = data.split("&user=")[1].split("&auth")[0]
        data = data.replace(user, unquote(user))
        return data

    @request_handler()
    async def get_profile_request(self):
        result = await self.session.get(f'{BASE_URL}/users/me', timeout=10)
        return result

    @request_handler()
    async def get_boosts_list(self):
        result = await self.session.get(f'{BASE_URL}/boosts/metas', timeout=10)
        return await result.json()

    @request_handler()
    async def buy_boost(self, meta_id: int):
        result = await self.session.post(f'{BASE_URL}/boosts/purchase', timeout=10, json={
            'metaId': meta_id
        })
        return await result.json()

    async def skins(self, skin_id):
        """
        –ù–∞—à—ë–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å–∫–∏–Ω–æ–≤, –∫–æ–≤—ã—Ä—è—è—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ FireFox.
        Get –∑–∞–ø—Ä–æ—Å—ã –¥–∞—é—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —á—Ç–æ-–ª–∏–±–æ –∫—É–ø–∏—Ç—å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –∏–±–æ –≤ —Å–∞–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤.
        (–í–∏–¥–∏–º–æ, *–ø–æ–∫–∞ —á—Ç–æ* –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤)
        """
        res_get1 = await self.session.get(f'{BASE_URL}/skin/all', timeout=10)  # –í—Å–µ —Å–∫–∏–Ω—ã
        res_get2 = await self.session.get(f'{BASE_URL}/skin/available', timeout=10)  # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã
        # –ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞
        res_post = await self.session.post(f'{BASE_URL}/skin/activate', timeout=10, json={'ids': [skin_id]})
        return [await res_get1.json(), await res_get2.json(), await res_post.json()]

    @request_handler()
    async def click(self, count, click_tick):
        logger.debug(f'–ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å {count} –∫–ª–∏–∫(–æ–≤)...')
        me = await self.client.get_me()
        msg = f'{me.id}:{click_tick}'.encode()
        hashed = hmac.new(ENC_KEY.encode('UTF-8'), msg, sha256).hexdigest()
        result = await self.session.post(f'{BASE_URL}/click/apply', timeout=10, json={
            'count': count,
            'hash': hashed
        })
        return hashed, result

    async def run(self):  # TODO: –°–¥–µ–ª–∞—Ç—å —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã.
        try:
            profile = await self.get_profile_request()
            if profile is None:
                raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!')
            elif profile.status != 200:
                raise Exception(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ö–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞: {profile.status}')

            profile = await profile.json()
            logger.debug(f'–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ {profile.get("id", 0)}')
            await logger.complete()
            if profile.get('banned', ''):
                raise Exception('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É...')

            energy = profile.get('energy', 0)
            balance = profile.get('clicks', 0)
            last_click = profile.get('lastClickSeconds', 0)

            recovery_time = profile.get('energyLimit', 0) // profile.get('energyBoostSum', 0)
            recovery_start = -1

            logger.debug(f'–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ:\n–≠–Ω–µ—Ä–≥–∏—è: {energy}\n–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏:'
                         f'{recovery_time}\n–ë–∞–ª–∞–Ω—Å:{balance}\n–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞:{last_click}')
            while True:
                if any(self.buy_type.values()):  # TODO: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ –ø–æ–∫—É–ø–æ–∫ + –ê–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    pass

                if self.do_click == 1 and energy > 10 and recovery_start == -1:
                    count = random.randint(CLICKS_AMOUNT[0], min(CLICKS_AMOUNT[1], int(energy)))
                    hashed, click = await self.click(count, last_click)
                    if click.status != 200:
                        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫–ª–∏–∫! –ö–æ–¥ –æ—à–∏–±–∫–∏: {click.status}. –°–ø–ª—é 30 —Å–µ–∫—É–Ω–¥...')
                        await asyncio.sleep(30)
                    else:
                        click = await click.json()
                        energy = click.get('currentEnergy', 0)
                        last_click = click.get('lastClickSeconds', 0)
                        sleep_time = random.randint(*CLICKS_SLEEP)

                        logger.info(
                            f'–ö–ª–∏–∫–∏ ({count}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!  |  {energy}‚ö° | +{click.get("count", 0)}üçâ  |  '
                            f'HASH: {hashed}')
                        logger.info(f'–°–ø–∏–º {sleep_time} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞...')
                        await asyncio.sleep(random.randint(*CLICKS_SLEEP))

                elif self.do_click != 2 and energy <= 10 and recovery_start == -1:
                    logger.info(f'–≠–Ω–µ—Ä–≥–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! –°–ø–∏–º {recovery_time} –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...')
                    recovery_start = time()

                elif self.do_click != 2 and recovery_start != -1:
                    if time() - recovery_start >= recovery_time:
                        logger.info('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É!')
                        recovery_start = -1

                elif self.do_click == 2:
                    logger.info(f'–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç {profile["id"]}')
                    await logger.complete()
                    await self.stop()
                    break

        except Exception as ex:
            logger.critical(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç {ex.__class__.__name__}: {ex}')
            await logger.complete()
            await self.stop()

    async def stop(self):
        await self.session.close()
        await self.client.stop()
