from aiogram import F, Router
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from loguru import logger
from pyrogram import Client
from pyrogram.errors.exceptions import bad_request_400

import app.key as k
from Private import api_hash, api_id
from db.functions import db_add_user, db_check_user_exists, db_update_user

router = Router()


# TODO: –î–æ–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–∫–µ—Ä–∞, –ë–î, –æ—Ç—á–µ—Ç –æ—à–∏–±–æ–∫

class Reg(StatesGroup):
    number = State()
    kod = State()
    sCode = State()
    Clients = State()


class Max(StatesGroup):
    max_ = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    if await db_check_user_exists(message.from_user.id):
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n'
                            f'–¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /reg', reply_markup=k.main)
    else:
        logger.warning(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.id})')


@router.message(Command('add'))  # –ü–æ–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é
async def add_user(message: Message, command: CommandObject):
    user_id = command.args
    if type(user_id) != int:
        user_id = int(user_id)
        logger.info(user_id)
    result = await db_add_user('ref', user_id)
    if result:
        await message.answer('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    else:
        await message.answer('‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer(f'/help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞'
                         f'\n "–ü—Ä–æ—Ñ–∏–ª—å" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω–∞–º–∞–π–Ω–∏–ª –∫–ª–∏–∫–µ—Ä'
                         f'\n /start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞'
                         f'\n "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–∫–µ—Ä –Ω–∞–∞—Ä–±—É–∑—ãüçâ" - –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–∫–µ—Ä  ')


@router.message(F.text == 'üÜò–ü–æ–º–æ—â—å')
async def get_prof(message: Message):
    await message.answer('–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –µ–º—É –æ–± –æ—à–∏–±–∫–µ - @Mr_Mangex')


@router.message(F.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
async def get_prof(message: Message):
    await message.answer('–ò–Ω—Ñ')


@router.message(F.text == 'üçâ–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–∫–µ—Ä –Ω–∞ –∞—Ä–±—É–∑—ã')
async def get_prof(message: Message):
    await message.reply('‚úÖ–ö–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω', reply_markup=k.OFF)


@router.callback_query(F.data == 'OFF')
async def back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–ö–ª–∏–∫–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω', reply_markup=k.ON)


@router.callback_query(F.data == 'ON')
async def back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–ö–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω', reply_markup=k.OFF)


@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def get_prof(message: Message):
    await message.answer('–ò–Ω—Ñ')


@router.message(Command('reg'))
async def reg(callback: CallbackQuery):
    await callback.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup=k.contact_btn)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.contact)  # TODO: –ù–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ 0_–æ
async def save_phone_number(message: Message, state: FSMContext):
    if message.contact.user_id == message.from_user.id:
        await state.update_data(number=message.contact.phone_number)
        client = Client(str(message.from_user.id), api_id, api_hash)
        await client.connect()
        sCode = await client.send_code(message.contact.phone_number)
        await state.update_data(Clients=client, sCode=sCode)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è: –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞, –º–µ—Å—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ)')
        await state.set_state(Reg.kod)


@router.message(Reg.kod)
async def reg_kod(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        await data["Clients"].sign_in(data["number"], data["sCode"].phone_code_hash, message.text.replace(' ', ''))
        await message.answer("–°–ø–∞—Å–∏–±–æ")
        await state.clear()
    except bad_request_400:
        await message.answer('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ –∏ –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è')


@router.message(F.text == 'ü§ù–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º')
async def get_ref(message: Message):
    await message.answer(f'–í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/ClickManagerbot?start={message.from_user.id}')


@router.message(F.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–∫–µ—Ä–∞')
async def setr_klik(message: Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)


@router.callback_query(F.data == 'Klik')
async def klik(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É –∫–ª–∏–∫–æ–≤', reply_markup=k.Yes_or_No_K)


@router.callback_query(F.data == 'YesK')
async def YesK(callback: CallbackQuery):
    change = await db_update_user(callback.from_user.id, {'BUY_CLICK': True})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'NoK')
async def NoK(callback: CallbackQuery):
    change = await db_update_user(callback.from_user.id, {'BUY_CLICK': False})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'Avto_klik')
async def Avto_klik(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É –ê–≤—Ç–æ –∫–ª–∏–∫–æ–≤',
                                     reply_markup=k.Yes_or_No_A)


@router.callback_query(F.data == 'YesA')
async def YesA(callback: CallbackQuery):
    change = await db_update_user(callback.from_user.id, {'BUY_MINER': True})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'NoA')
async def NoA(callback: CallbackQuery):
    change = await db_update_user(callback.from_user.id, {'BUY_MINER': False})
    if change:
        await callback.answer('–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    else:
        await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é!')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'Energy')
async def Energy(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É —ç–Ω–µ—Ä–≥–∏–∏"',
                                     reply_markup=k.Yes_or_No_E)


@router.callback_query(F.data == 'YesE')
async def YesE(callback: CallbackQuery):
    await callback.answer('–û–ø–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'NoE')
async def NoE(callback: CallbackQuery):
    await callback.answer('–û–ø–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=k.Settings)
    pass


@router.callback_query(F.data == 'Max_lvl')
async def klik(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π –ª–∏–º–∏—Ç —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å (—Ü–∏—Ñ—Ä–∞)')
    await state.set_state(Max.max_)


@router.message(Max.max_)
async def max_message(message: Message, state: FSMContext):
    try:
        await state.update_data(max_=int(message.text))
        await message.answer('–û–ø–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞‚úÖ')
    except ValueError:
        await state.set_state(Max.max_)
